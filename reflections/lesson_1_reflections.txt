How did viewing a diff between two versions of a file help you see the bug that was introduced?
It made it easier by eliminating all the similarites and ONLY showing the differences.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
You can revert back to working versions. You can reference older versions of functions while rewriting more effecient/improved versions of the functions.
You can maintain older versions for older systems or different customers. You can sell different versions of functionality to different customers' specific needs.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?
The pros to manual commits are having better control of versions. The cons to manual commits are missing vital save points that might not align with a good commit point.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?
I think this is to make sure everything is up to date and timestamped correctly to be easier to track.

How can you use the commands git log and git diff to view the history of files?
git log shows you a history of commits
git diff "first commit id" "second commit id" shows you all the changes between the two commits

How might using version control make you more confident to make changes that could break something?
You can revert back so easily. You can create branches to expirement without breaking a working rev.

Now that you have your workspace set up, what do you want to try using Git for?
I want to use Git to track all bug fixes.